#!/bin/bash

#
#  /home/larsb
#        `-- sw               ...  prefix
#            |-- bin
#            |-- include
#            |-- lib
#            `-- src          ...  basedir
#

prefix=/home/larsb/sw
basedir=${prefix}/src

## =============================================================================
##
##  Build the individual packages
##
## =============================================================================

##______________________________________________________________________________
##                                                                         Boost

## Checkout or update working copy
boost_update ()
{
    cd ${basedir}

    if [[ -d boost ]] ; then
        cd boost
        echo "[Boost] Pulling in updates ..."
        svn up
    else
        echo "[Boost] Checking out working copy ..."
        svn co http://svn.boost.org/svn/boost/trunk boost
    fi
}

## Build and install package
boost_install ()
{
    cd $basedir/boost

    echo "[Boost] Bootstrapping source code ..."
    ./bootstrap.sh --prefix=$prefix

    echo "[Boost] Build from source code ..."
    ./b2

    echo "[Boost] Clean up build directory ..."
    ./b2 --clean
}

##______________________________________________________________________________
##                                                                    LLVM/Clang

clang_update ()
{
    cd ${basedir}

    if [[ -d llvm ]] ; then
        cd ${basedir}/llvm
        echo "[LLVM] Pulling in updates ..."
        git pull
        cd ${basedir}/llvm/tools/clang
        git pull
    else
        echo "[LLVM] Checking out working copy ..."
    fi
}

clang_install ()
{
    cd ${basedir}/llvm

    ## Fresh build directory
    rm -rf build
    mkdir build

    ## Configure project to build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=$prefix ..
    make -j2 install

    ## Post-installation clean-up
    cd ${basedir}/llvm
    rm -rf build
}

##______________________________________________________________________________
##                                                                         CMake

cmake_update ()
{
    cd $basedir

    if [[ -d cmake ]] ; then
        cd $basedir/cmake
        git pull
    else
        git clone git://cmake.org/cmake.git
    fi
}

## Build and install package
cmake_install ()
{
    cd $basedir/cmake

    echo "[CMake] Bootstrapping source code ..."
    rm -rf build
    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=$prefix ..

    echo "[CMake] Build from source code ..."
    make && make install
}

##______________________________________________________________________________
##                                                                       Doxygen

doxygen_update ()
{
    cd $basedir

    if [[ -d doxygen ]] ; then
        cd doxygen
        git pull
    else
        git clone https://github.com/doxygen/doxygen.git
    fi
}

## Build and install package
doxygen_install ()
{
    cd $basedir/doxygen

    echo "[Doxygen] Configuring package ..."
    ./configure --prefix $prefix

    echo "[Doxygen] Building package ..."
    make

    echo "[Doxygen] Installing package ..."
    make install

    echo "[Doxygen] Cleaning up build directory ..."
    make clean
}

##______________________________________________________________________________
##                                                                      Valgrind

valgrind_install ()
{
    cd $basedir

    if [[ -d valgrind ]] ; then
        cd valgrind
        svn up
    else
        git clone https://github.com/svn2github/valgrind.git
    fi
}

valgrind_update ()
{
    echo "[update_sw::Valgrind] Updating installation"

    cd ${basedir}/valgrind
    ./autogen.sh
    ./configure --prefix=${prefix}
    make
    make install

    echo "[update_sw::Valgrind] Updating installation - DONE"
}

## =============================================================================
##
##  Program main
##
## =============================================================================

echo ""
echo "[`date`] update_sw - START"
echo ""

until [ -z "$1" ]
do
    case $1 in
        boost)
            boost_update
            boost_install
        ;;
        clang)
            clang_update
            clang_install
        ;;
        cmake)
            cmake_update
            cmake_install
        ;;
        doxygen)
            doxygen_update
            doxygen_install
        ;;
        valgrind)
            valgrind_update
            valgrind_install
        ;;
        *)
            for PACKAGE in boost clang cmake doxygen valgrind
            {
                ${PACKAGE}_update
                ${PACKAGE}_install
            }
        ;;
    esac
    shift
done

echo ""
echo "[`date`] update_sw - DONE"
echo ""

exit 0
