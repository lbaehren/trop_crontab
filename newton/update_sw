#!/bin/bash

#
#  /data/larsb
#        `-- sw               ...  prefix
#            |-- bin
#            |-- include
#            |-- lib
#            `-- src          ...  basedir
#

prefix=/data/larsb/sw
basedir=${prefix}/src

## =============================================================================
##
##  Build the individual packages
##
## =============================================================================

##______________________________________________________________________________
##                                                                         Boost

boost_update ()
{
    cd ${basedir}

    ## Checkout or update working copy

    if [[ -d boost ]] ; then
        cd boost
        echo "[Boost] Pulling in updates ..."
        svn up
    else
        echo "[Boost] Checking out working copy ..."
        svn co http://svn.boost.org/svn/boost/trunk boost
    fi

    ## Build and install package

    cd ${basedir}/boost

    echo "[Boost] Bootstrapping source code ..."
    ./bootstrap.sh --prefix=$prefix

    echo "[Boost] Build from source code ..."
    ./b2

    echo "[Boost] Clean up build directory ..."
    ./b2 --clean
}

##______________________________________________________________________________
##                                                                    LLVM/Clang

clang_update ()
{
    cd ${basedir}

    ## Checkout or update working copy

    if [[ -d llvm ]] ; then
        cd ${basedir}/llvm
        echo "[LLVM] Pulling in updates ..."
        git pull
        cd ${basedir}/llvm/tools/clang
        git pull
    else
        echo "[LLVM] Checking out working copy ..."
        git clone http://llvm.org/git/llvm.git
        echo "[LLVM::Clang] Checking out working copy ..."
        cd llvm/tools
        git clone http://llvm.org/git/clang.git
    fi

    ## Build and install package

    cd ${basedir}/llvm

    ## Fresh build directory
    rm -rf build
    mkdir build

    ## Configure project to build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=$prefix ..
    make -j2 install

    ## Post-installation clean-up
    cd ${basedir}/llvm
    rm -rf build
}

##______________________________________________________________________________
##                                                                         CMake

cmake_update ()
{
    cd $basedir

    ## Checkout or update working copy

    if [[ -d cmake ]] ; then
        cd $basedir/cmake
        git pull
    else
        git clone git://cmake.org/cmake.git
    fi

    ## Build and install package

    cd $basedir/cmake

    echo "[CMake] Bootstrapping source code ..."
    rm -rf build
    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=$prefix ..

    echo "[CMake] Build from source code ..."
    make -j2 && make install
}

##______________________________________________________________________________
##                                                                       Doxygen

doxygen_update ()
{
    cd $basedir

    if [[ -d doxygen ]] ; then
        cd doxygen
        git pull
    else
        git clone https://github.com/doxygen/doxygen.git
    fi

    ## Build and install package

    cd $basedir/doxygen

    echo "[Doxygen] Configuring package ..."
    ./configure --prefix $prefix

    echo "[Doxygen] Building package ..."
    make -j2

    echo "[Doxygen] Installing package ..."
    make install

    echo "[Doxygen] Cleaning up build directory ..."
    make clean
}

##______________________________________________________________________________
##                                                                      Valgrind

valgrind_update ()
{
    cd $basedir

    ## Checkout or update working copy

    if [[ -d valgrind ]] ; then
        cd valgrind
        svn up
    else
        git clone https://github.com/svn2github/valgrind.git
    fi

    ## Build and install package

    cd ${basedir}/valgrind

    mkdir -p VEX

    ./autogen.sh
    ./configure --prefix=${prefix}
    make -j2 && make install

    echo "[update_sw::Valgrind] Updating installation - DONE"
}

## =============================================================================
##
##  Program main
##
## =============================================================================

echo ""
echo "[`date`] update_sw - START"
echo ""

## Check if the base directory does exists - if not, create it.

if [[ -d ${basedir} ]] ; then
    echo "Source directory ${basedir} found."
else
    echo "Source directory ${basedir} not found - creating it now!"
    mkdir -p ${basedir}
fi

## Handle command line options

if [ -z "$1" ]
then
    for PACKAGE in boost clang cmake doxygen valgrind
    {
        ${PACKAGE}_update
    }
else
    until [ -z "$1" ]
    do
        case $1 in
            boost)
                boost_update
            ;;
            clang)
                clang_update
            ;;
            cmake)
                cmake_update
            ;;
            doxygen)
                doxygen_update
            ;;
            valgrind)
                valgrind_update
            ;;
        esac
        shift
    done
fi


echo ""
echo "[`date`] update_sw - DONE"
echo ""

exit 0
