#!/bin/bash

# (c) SRON - Netherlands Institute for Space Research (2014-2015).
# All Rights Reserved.
# This software is distributed under the BSD 2-clause license.

## Variables
#
#  Directory structure:
#
#  /deos
#   `-- larsb
#       |-- sw
#       |   `-- bin            .. Custom software installation
#       |-- tmp                .. Temporary files
#       |   `-- quicklooks
#       `-- tropomi            .. TROPOMI-related data
#           `-- results
#               `-- quicklooks
#

varBasedir=`pwd`
varSourceDir="/deos/larsb/tropomi/results/quicklooks"
varTmpDir=/deos/larsb/tmp/quicklooks
varTargetDir="/home/larsb/public_html/tropomi/quicklooks"
varLockfile=/var/lock/webpage_quicklooks.lock
varCampaigns="occ"
varMeasurements="CELL_EARTH CELL_SUN CHECK_EXPOSURE_TIME DARK DLED_LIN DRK_DPQF DRY_RUN EWLS FEL_EARTH FEL_SUN FILTER_EARTH_STRAY FILTER_EARTH_SUN FPBB_EARTH FPBB_SUN LASER LASER_EARTH_ISRF MON_A MON_B STAR_EARTH_GEO STRAY SWIRLS_EARTH_INHOMO SWIRLS_EARTH_ISRF SWIRLS_EARTH_STRAY WLS_LIN_GO"
varQuicklooks="quicklook_raw quicklook_raw_detector quicklook_eps quicklook_eps_detector quicklook_detector quicklook_scan report_detector quicklook_signal"
varSuffixes="pdf png"
varOutfile="index.html"
varPageTitle="TROPOMI SWIR quicklooks"

binDoxygen=/data/larsb/sw/bin/doxygen

# ==============================================================================
#
#  Functions
#
# ==============================================================================

#_______________________________________________________________________________
#                                                                  campaign_name

##  Get the full name/descripion of the measurement campaign.
#
#  @param name Abbreviation for the measurement campaign.
#  @return description Full name for the measurement campaign.
campaign_name ()
{
    case $1 in
        "occ")
            echo "On-Ground calibration (occ)"
        ;;
        "post_env")
            echo "Post-environmental calibration (post_env)"
        ;;
        "pre_env")
            echo "Pre-environmental calibration (pre_env)"
        ;;
    esac
}

#_______________________________________________________________________________
#                                                       dissect_measurement_name

## Dissect "_" separated measurement ID into its subcomponents
#
# Dissect "_" separated measurement ID into its subcomponents and convert first
# letter of that string to upper-case.
dissect_measurement_name ()
{
    tmp=`echo $1 | tr "[A-Z]" "[a-z]" | sed s/"_"/" "/g`
    for NAME in ${tmp}
    {
        echo ${NAME} | sed s#`echo ${NAME:0:1}`#`echo ${NAME:0:1} | tr "[a-z]" "[A-Z]"`#
    }
}

#_______________________________________________________________________________
#                                                      measurement_name_variants

## Generate list with variants of the measurement name
#
# Generate list with variants of the measurement name; since the annotation of the
# measurements is not fully standardized we need to take in to account upper/lower
# case writing, etc.
measurement_name_variants ()
{
    varMeasurement=$1
    varNames=${varMeasurement}

    tmp=`echo ${varMeasurement} | tr "[A-Z]" "[a-z]"`
    varNames="${varNames} ${tmp}"

    tmp=`echo ${varMeasurement} | sed s/"_"/""/g`
    varNames="${varNames} ${tmp}"

    tmp=`echo ${varMeasurement} | tr "[A-Z]" "[a-z]" | sed s/"_"/""/g`
    varNames="${varNames} ${tmp}"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""# | sed s#"\ "#"_"#g`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""# | sed s#"\ "#"_"#g | tr '[a-z]' '[A-Z]'`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""# | sed s#"\ "#"_"#g | tr '[A-Z]' '[a-z]'`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#"_"#g`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""#g`"

    echo ${varNames}
}

#_______________________________________________________________________________
#                                                              find_measurements

## Find quicklook data for measurements
find_measurements ()
{
	echo "Searching for quicklook files ..."

	for varCampaign in ${varCampaigns}
	{
		for varMeasurement in ${varMeasurements}
		{
			echo " - ${varCampaign}.${varMeasurement} quicklooks"

			varLogfile=${varTmpDir}/${varCampaign}.${varMeasurement}.txt
			rm -f ${varLogfile}

			## =============================================

			echo "   -> Extracting initial list"

			for varName in `measurement_name_variants ${varMeasurement}`
            {
	    		find ${varSourceDir}/${varCampaign}  -name "*${varName}*" >> ${varLogfile}
            }

			## =============================================

			echo "   -> Removing multiple entries"

            if [[ `stat -c%s ${varLogfile}` == 0 ]] ; then
                echo "      -> No datasets found - removing index file."
                rm -f ${varLogfile}
            else
                cat ${varLogfile} | sort -r | uniq > ${varLogfile}.tmp
                mv ${varLogfile}.tmp ${varLogfile}

                ## =========================================

                echo "   -> Checking document pages"

                for FILE in `cat ${varLogfile}`
                {
                    if [[ `grep pdf $FILE` ]] ; then
                        # extract number of PDF pages
                        varPages=`pdfinfo ${FILE} | grep Pages | tr ":" "\n" | grep -v Pages | sed 's/^[ \t]*//'`
                        # write output to page
                        case ${varPages} in
                            "")
                                # Remove file to save disk space
                                rm -f ${FILE}
                            ;;
                            "0")
                                # Remove file to save disk space
                                rm -f ${FILE}
                            ;;
                            *)
                                echo $FILE >> ${varLogfile}.tmp
                            ;;
                        esac
                    else
                        echo $FILE >> ${varLogfile}.tmp
                    fi
                }  ##  end loop "for FILE"

                # Store the vetted list (if it is not empty)
                if [[ `stat -c%s ${varLogfile}.tmp` == 0 ]] ; then
                    echo " - ${varLogfile}.tmp is empty - removing it now"
                    rm -f ${varLogfile}.tmp
                else
                    mv ${varLogfile}.tmp ${varLogfile}
                fi

            fi

		}  ##  end loop "for varMeasurement" ====================

	}

	echo "Searching for quicklook files ... DONE"
}

#_______________________________________________________________________________
#                                                                 find_nof_files

## Find the number of files of a given type
#
#  @param varCampaign - Identifier for the measurement campaign.
find_nof_files ()
{
    varCampaign=$1

    if [ -z $2 ] ; then
        # === no measurement type defined =================
        if [ -z $3 ] ; then
            varIndexFile="${varTmpDir}/${varCampaign}.*.txt"
        else
			# === Quicklook type defined ==================
            varIndexFile="${varTmpDir}/${varCampaign}.*.txt"
        fi
    else
		varMeasurement=$2
        # === measurement type defined ====================
        if [ -z $3 ] ; then
            varIndexFile="${varTmpDir}/${varCampaign}.${varMeasurement}.txt"
        else
            varIndexFile="${varTmpDir}/${varCampaign}.${varMeasurement}.txt"
        fi
    fi

    if [[ -f ${varIndexFile} ]] ; then
        if [ -z $3 ] ; then
            nofFiles=`cat ${varIndexFile}`
        else
            nofFiles=`cat ${varIndexFile} | grep $3`
        fi
        # report nof. files
        echo ${nofFiles}  | wc -w  | sed 's/^[ \t]*//'
    else
        echo "0"
    fi
}

#_______________________________________________________________________________
#                                                                      sync_data

##  Synchronize (import) data from IDAF to SRON.
#
#   Synchronization of data:
#   1. rsync from IDAF (KNMI) to local data disk at SRON.
#   2. Collect additional data, e.g. plots generated by Richard
#
#   Organization of the local directories:
#
#    /deos
#     `-- larsb
#         `-- tropomi
#             `-- results
#                 `-- quicklooks
#                     |-- occ
#                     |-- post_env
#                     `-- pre_env
#
sync_data ()
{
    # rsync from IDAF (KNMI) to local data disk at SRON

    cd /data/larsb/tropomi
    make sync_quicklooks
    make sync_reports

    # Collect additional files prepared by Richard

    cd /home/richardh/Pictures
    for varMeasurement in `ls | grep SwirlsEarthIsrf`
    {
        cd /home/richardh/Pictures/${varMeasurement}
        for FILE in `ls *.png`
        {
            varFilename="${varMeasurement}.`echo ${FILE} | sed s/'quicklook'/'quicklook_signal'/`"
            cp ${FILE} ${varSourceDir}/occ/${varFilename}
        }
    }
}

#_______________________________________________________________________________
#                                                                 doxygen_config

## Configuration settings for runnning Doxygen
doxygen_config ()
{
    echo "#---------------------------------------------------------------------------"
    echo "# Project settings"
    echo "#---------------------------------------------------------------------------"
    echo "DOXYFILE_ENCODING      = UTF-8"
    echo "PROJECT_NAME           = \"${varPageTitle}\""
    echo "FULL_PATH_NAMES        = NO"
    echo "MARKDOWN_SUPPORT       = YES"
    echo "SHOW_NAMESPACES        = NO"
    echo "#---------------------------------------------------------------------------"
    echo "# Input settings"
    echo "#---------------------------------------------------------------------------"
    echo "INPUT                  = ${varTmpDir}"
    echo "RECURSIVE              = YES"
    echo "IMAGE_PATH             = ${varSourceDir}"
    echo "HTML_OUTPUT            = ${varTmpDir}/html"
    echo "#---------------------------------------------------------------------------"
    echo "# Configuration options related to output"
    echo "#---------------------------------------------------------------------------"
    echo "GENERATE_HTML          = YES"
    echo "GENERATE_LATEX         = NO"
    echo "GENERATE_XML           = NO"
    echo "GENERATE_RTF           = NO"
}

#_______________________________________________________________________________
#                                                                      md_header

## Create header for a new page.
#
#  @param title  Title of the page.
#  @param anchor Anchor used for linking to the page.
md_header ()
{
    varTitle=$1
    varAnchor=$2
    varTitleLength=`echo ${varTitle} | wc -c`
    ((varTitleLength--))
    s=$(printf "%-${varTitleLength}s" "=")
    varUnderscore=`echo "${s// /=}"`

    echo "${varTitle}  {#${varAnchor}}"
    echo "${varUnderscore}"
    echo ""
}

#_______________________________________________________________________________
#                                                               md_page_campaign

## Generate the page with an overview per measurement campaign (post_env, occ)
#
#  @param varCampaign - Identifier for the measurement campaign.
md_page_campaign ()
{
    varCampaign=$1

    md_header ${varCampaign} ${varCampaign}

    echo ""
    for varMeasurement in ${varMeasurements}
    {
        nofMeasurements=`find_nof_files ${varCampaign}  ${varMeasurement}`

        if [[ ${nofMeasurements} -ne 0 ]] ; then
            varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`
            echo " - \subpage ${varAnchor}  (${nofMeasurements} files)"

            for varQuicklook in ${varQuicklooks}
            {
                nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
                # only create link if there is some contents to link to
                if [[ ${nofQuicklooks} -ne 0 ]] ; then
                    # create anchor to sub-page
                    varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
                    # create link to sub-page
                    echo "   - \ref ${varAnchor}  (${nofQuicklooks} files)"
                fi
            }
        fi
    }
    echo ""
}

#_______________________________________________________________________________
#                                                            md_page_measurement

## Create page for a given measuremt type
#
#  @param varCampaign    - Identifier for the measurement campaign.
#  @param varMeasurement - Identifier for the measurement.
md_page_measurement ()
{
    varCampaign=$1
    varMeasurement=$2
    varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`

    md_header ${varMeasurement} ${varAnchor}

    for varQuicklook in ${varQuicklooks}
    {
        nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
        # only create link if there is some contents to link to
        if [[ ${nofQuicklooks} -ne 0 ]] ; then
            varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
            echo " - \subpage ${varAnchor}  (${nofQuicklooks} files)"
        fi
    }
}

#_______________________________________________________________________________
#                                                              md_page_quicklook

md_page_quicklook ()
{
    varCampaign=$1
    varMeasurement=$2
    varQuicklook=$3
    varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
    varIndexFile="${varTmpDir}/${varCampaign}.${varMeasurement}.txt"

    md_header ${varQuicklook} ${varAnchor}

	echo "\ingroup ${varCampaign}"
	echo "\ingroup ${varMeasurement}"
	echo "\ingroup ${varQuicklook}"
    echo ""

    ## === List of quicklooks ==============================

    if [[ -f ${varIndexFile} ]] ; then

        FILES=`cat ${varIndexFile} | grep ${varQuicklook}`
        for FILE in ${FILES}
        {
            varLink=`echo ${FILE} | sed s#${varSourceDir}/##`

            if [[ `grep pdf $FILE` ]] ; then
                varFilename=`echo ${FILE} | sed s#${varSourceDir}/${varCampaign}/## | sed s#.detector4.pdf##`
                # extract number of PDF pages
                varPages=`pdfinfo ${FILE} | grep Pages | tr ":" "\n" | grep -v Pages | sed 's/^[ \t]*//'`
                # create entry on page
                echo "  -# [${varFilename}](${varLink})  (${varPages} pages)"
            else
                varFilename=`echo ${FILE} | sed s#${varSourceDir}/${varCampaign}/##`
                echo "  -# [${varFilename}](${varLink})"
            fi
        }

    fi
}

#_______________________________________________________________________________
#                                                                       md_pages

md_pages ()
{
    # Create source directory
    mkdir -p ${varTmpDir}

    # Create configuration file for Doxygen
    doxygen_config > ${varTmpDir}/doxygen.config

    # Find measurements and write results to temporary output
    find_measurements

    # Header for main page
    echo "${varPageTitle}  {#mainpage}"  > ${varTmpDir}/index.md
    echo "==============="              >> ${varTmpDir}/index.md
    echo ""                             >> ${varTmpDir}/index.md
    echo " - [Quicklook reports](http://idaf.tropomi.eu/omdb/serve_analysis_results/quicklook) (KNMI)" >> ${varTmpDir}/index.md
    echo " - [OCAL logbook](http://idaf.tropomi.eu/logbook/logbook) (KNMI)" >> ${varTmpDir}/index.md

    echo "Generating pages ..."

    for varCampaign in ${varCampaigns}
    {
        ## === Entries to main page =======================

        nofFiles=`find_nof_files ${varCampaign}`

        echo ""                                                >> ${varTmpDir}/index.md
        echo "`campaign_name ${varCampaign}`"                  >> ${varTmpDir}/index.md
        echo "----"                                            >> ${varTmpDir}/index.md
        echo ""                                                >> ${varTmpDir}/index.md
        echo " - \subpage ${varCampaign}  (${nofFiles} files)" >> ${varTmpDir}/index.md

        ## === Create subpage for campaign ================
        varPage=${varTmpDir}/`echo ${varCampaign}.md | tr "[A-Z]" "[a-z]"`
        md_page_campaign ${varCampaign} > ${varPage}

        for varMeasurement in ${varMeasurements}
        {
            echo " - ${varCampaign}.${varMeasurement}"
            ## === Entries to main page ===================

			nofMeasurements=`find_nof_files ${varCampaign} ${varMeasurement}`
            # only create link and subpages if there is some contents to link to
            if [[ ${nofMeasurements} -ne 0 ]] ; then
                # create anchor for page
                varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`
                # link on main page
                echo "   - \ref ${varAnchor}  (${nofMeasurements} files)" >> ${varTmpDir}/index.md
                # sub-page for the type of measurement
                varPage=${varTmpDir}/`echo ${varCampaign}_${varMeasurement}.md | tr "[A-Z]" "[a-z]"`
                md_page_measurement ${varCampaign} ${varMeasurement} > ${varPage}

                for varQuicklook in ${varQuicklooks}
                {
		            nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
                    if [[ ${nofQuicklooks} -ne 0 ]] ; then
                        varPage=${varTmpDir}/`echo ${varCampaign}_${varMeasurement}_${varQuicklook}.md | tr "[A-Z]" "[a-z]"`
                        md_page_quicklook ${varCampaign} ${varMeasurement} ${varQuicklook} > ${varPage}
                    fi
                }
            fi
        }
    }

    echo "Generating pages ... DONE"

    # Keep track of disk-space used
    echo ""                       >> ${varTmpDir}/index.md
    echo ""                       >> ${varTmpDir}/index.md
    echo "----"                   >> ${varTmpDir}/index.md
    echo "**Disk usage summary**" >> ${varTmpDir}/index.md
    echo "\code"                  >> ${varTmpDir}/index.md
    du -h ${varTargetDir} | sed s#/home/## >> ${varTmpDir}/index.md
    echo "\endcode"               >> ${varTmpDir}/index.md

    # Run doxygen to generate HTML output
    ${binDoxygen} ${varTmpDir}/doxygen.config

    # Publish the generated pages to web-server directory
    publish_pages

    # Wrapping up
    rm -f ${varTmpDir}/*.md
    rm -f ${varTmpDir}/*.txt
    date > ${varTmpDir}/last_run.log
}

#_______________________________________________________________________________
#                                                                       md_pages

## Publish the generated pages to web-server directory
publish_pages ()
{
    # Copy HTML pages
    rsync -axuzP --delete ${varTmpDir}/html/* ${varTargetDir}

    # Copy quicklook files
    for varCampaign in ${varCampaigns}
    {
        rsync -axuzP --delete ${varSourceDir}/${varCampaign} ${varTargetDir}
    }
}

## === Processing ==============================================================

if [ ! -e $varLockfile ]; then
   trap "rm -f $varLockfile; exit" INT TERM EXIT
   touch $varLockfile

    # ============================================

    # Syncronize data between KNMI and SRON
    sync_data

    # Generate web-pages
    cd ${varBasedir}
    md_pages

    # ============================================

   rm -f $varLockfile
   trap - INT TERM EXIT
else
   echo "webpage_quicklooks is already running"
fi
