#!/bin//bash

## === Variables ===============================================================

varBasedir=`pwd`
varTmpDir=${varBasedir}/doxygen_src
varTargetDir="/home/larsb/public_html/tropomi/quicklooks"
varSourceDirectories="/deos/larsb/tropomi/results/quicklooks"
varCampaigns="occ post_env"
varMeasurements="CHECK_EXPOSURE_TIME DLED_LIN DRK_DPQF DRY_RUN EWLS FILTER FPBB_EARTH LASER MON_A MON_B STAR_EARTH_GEO STRAY WLS_LIN_GO"
varQuicklooks="quicklook_raw quicklook_raw_detector quicklook_eps quicklook_eps_detector quicklook_detector quicklook_scan"
varOutfile="index.html"
varPageTitle="TROPOMI SWIR quicklooks"

binDoxygen=/data/larsb/sw/bin/doxygen

## === Functions ===============================================================

#_______________________________________________________________________________
#                                                                  campaign_name

##  Get the full name/descripion of the measurement campaign.
#
#  @param name Abbreviation for the measurement campaign.
#  @return description Full name for the measurement campaign.
campaign_name ()
{
    case $1 in
        "occ")
            echo "On-Ground calibration (occ)"
        ;;
        "post_env")
            echo "Post-environmental calibration (post_env)"
        ;;
        "pre_env")
            echo "Pre-environmental calibration (pre_env)"
        ;;
    esac
}

#_______________________________________________________________________________
#                                                       dissect_measurement_name
#
# Dissect "_" separated measurement ID into its subcomponents and convert first
# letter of that string to upper-case.

dissect_measurement_name ()
{
    tmp=`echo $1 | tr "[A-Z]" "[a-z]" | sed s/"_"/" "/g`
    for NAME in ${tmp}
    {
        echo ${NAME} | sed s#`echo ${NAME:0:1}`#`echo ${NAME:0:1} | tr "[a-z]" "[A-Z]"`#
    }
}

#_______________________________________________________________________________
#                                                      measurement_name_variants
#
# Generate list with variants of the measurement name; since the annotation of the
# measurements is not fully standardized we need to take in to account upper/lower
# case writing, etc.

measurement_name_variants ()
{
    varMeasurement=$1
    varNames=${varMeasurement}

    tmp=`echo ${varMeasurement} | tr "[A-Z]" "[a-z]"`
    varNames="${varNames} ${tmp}"

    tmp=`echo ${varMeasurement} | sed s/"_"/""/g`
    varNames="${varNames} ${tmp}"

    tmp=`echo ${varMeasurement} | tr "[A-Z]" "[a-z]" | sed s/"_"/""/g`
    varNames="${varNames} ${tmp}"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""# | sed s#"\ "#"_"#g`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""# | sed s#"\ "#"_"#g | tr '[a-z]' '[A-Z]'`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""# | sed s#"\ "#"_"#g | tr '[A-Z]' '[a-z]'`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#"_"#g`"

    tmp=`dissect_measurement_name ${varMeasurement}`
    varNames="${varNames} `echo ${tmp} | sed s#"\ "#""#g`"

    echo ${varNames}
}

#_______________________________________________________________________________
#                                                                 find_nof_files

find_nof_files ()
{
    varCampaign=$1

    if [ -z $2 ] ; then
        # === no measurement type defined =================
        if [ -z $3 ] ; then
            nofFiles=`cat ${varTmpDir}/${varCampaign}.*.txt`
        else
			# === Quicklook type defined ==================
            nofFiles=`cat ${varTmpDir}/${varCampaign}.*.txt | grep $3`
        fi
    else
		varMeasurement=$2
        # === measurement type defined ====================
        if [ -z $3 ] ; then
            nofFiles=`cat ${varTmpDir}/${varCampaign}.${varMeasurement}.txt`
        else
            nofFiles=`cat ${varTmpDir}/${varCampaign}.${varMeasurement}.txt | grep $3`
        fi
    fi
	
	echo ${nofFiles}  | wc -w  | sed 's/^[ \t]*//'
}

##______________________________________________________________________________
##                                                                     sync_data
##
##  Synchronize (import) data from IDAF to SRON.

sync_data ()
{
    cd /data/larsb/tropomi
    make sync_quicklooks
}

##______________________________________________________________________________
##                                                                doxygen_config
##
## Configuration settings for runnning Doxygen

doxygen_config ()
{
    echo "#---------------------------------------------------------------------------"
    echo "# Project settings"
    echo "#---------------------------------------------------------------------------"
    echo "DOXYFILE_ENCODING      = UTF-8"
    echo "PROJECT_NAME           = \"${varPageTitle}\""
    echo "FULL_PATH_NAMES        = NO"
    echo "MARKDOWN_SUPPORT       = YES"
    echo "SHOW_NAMESPACES        = NO"
    echo "#---------------------------------------------------------------------------"
    echo "# Input settings"
    echo "#---------------------------------------------------------------------------"
    echo "INPUT                  = ${varTmpDir}"
    echo "RECURSIVE              = YES"
    echo "IMAGE_PATH             = ${varSourceDirectories}"
    echo "HTML_OUTPUT            = ${varTargetDir}"
    echo "#---------------------------------------------------------------------------"
    echo "# Configuration options related to output"
    echo "#---------------------------------------------------------------------------"
    echo "GENERATE_HTML          = YES"
    echo "GENERATE_LATEX         = NO"
    echo "GENERATE_XML           = NO"
    echo "GENERATE_RTF           = NO"
}

#_______________________________________________________________________________
#                                                                      md_header

## Create header for a new page.
#
#  @param title  Title of the page.
#  @param anchor Anchor used for linking to the page.
md_header ()
{
    varTitle=$1
    varAnchor=$2
    varTitleLength=`echo ${varTitle} | wc -c`
    ((varTitleLength--))
    s=$(printf "%-${varTitleLength}s" "=")
    varUnderscore=`echo "${s// /=}"`

    echo "${varTitle}  {#${varAnchor}}"
    echo "${varUnderscore}"
    echo ""
}

##______________________________________________________________________________
##                                                              md_page_campaign

md_page_campaign ()
{
    varCampaign=$1

    md_header ${varCampaign} ${varCampaign}

    echo ""
    for varMeasurement in ${varMeasurements}
    {
		nofMeasurements=`find_nof_files ${varCampaign}  ${varMeasurement}`

        if [[ ${nofMeasurements} -ne 0 ]] ; then
            varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`
            echo " - \subpage ${varAnchor}  (${nofMeasurements} files)"

            for varQuicklook in ${varQuicklooks}
            {
                nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
                # only create link if there is some contents to link to
                if [[ ${nofQuicklooks} -ne 0 ]] ; then
                    # create anchor to sub-page
                    varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
                    # create link to sub-page
                    echo "   - \ref ${varAnchor}  (${nofQuicklooks} files)"
                fi
            }
        fi
    }
    echo ""
}

##______________________________________________________________________________
##                                                           md_page_measurement

md_page_measurement ()
{
    varCampaign=$1
    varMeasurement=$2
    varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`

    md_header ${varMeasurement} ${varAnchor}

    for varQuicklook in ${varQuicklooks}
    {
        nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
        # only create link if there is some contents to link to
        if [[ ${nofQuicklooks} -ne 0 ]] ; then
            varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
            echo " - \subpage ${varAnchor}  (${nofQuicklooks} files)"
        fi
    }
}

##______________________________________________________________________________
##                                                             md_page_quicklook

md_page_quicklook ()
{
    varCampaign=$1
    varMeasurement=$2
    varQuicklook=$3
    varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`

    md_header ${varQuicklook} ${varAnchor}

	echo "\ingroup ${varCampaign}"
	echo "\ingroup ${varMeasurement}"
	echo "\ingroup ${varQuicklook}"

    ## === List of quicklooks ==============================

    FILES=`cat ${varTmpDir}/${varCampaign}.${varMeasurement}.txt | grep ${varQuicklook}`
    for FILE in ${FILES}
    {
        varFilename=`echo ${FILE} | sed s#${varTargetDir}/${varCampaign}/## | sed s#.detector4.pdf##`
        varLink=`echo ${FILE} | sed s#${varTargetDir}/##`
        # extract number of PDF pages
        varPages=`pdfinfo ${FILE} | grep Pages | tr ":" "\n" | grep -v Pages | sed 's/^[ \t]*//'`
        # create entry on page
        echo "  -# [${varFilename}](${varLink})  (${varPages} pages)"
    }
}

##______________________________________________________________________________
##                                                                      md_pages

md_pages ()
{
    # Create source directory
    mkdir -p ${varTmpDir}

    # Create configuration file for Doxygen
    doxygen_config > ${varTmpDir}/doxygen.config

	# Find measurements and write results to temporary output
	find_measurements

    # Header for main page
    echo "${varPageTitle}  {#mainpage}"  > ${varTmpDir}/index.md
    echo "==============="              >> ${varTmpDir}/index.md

    for varCampaign in ${varCampaigns}
    {
        ## === Entries to main page =======================

		nofFiles=`find_nof_files ${varCampaign}`

        echo ""                                                >> ${varTmpDir}/index.md
        echo "`campaign_name ${varCampaign}`"                  >> ${varTmpDir}/index.md
        echo "----"                                            >> ${varTmpDir}/index.md
        echo ""                                                >> ${varTmpDir}/index.md
        echo " - \subpage ${varCampaign}  (${nofFiles} files)" >> ${varTmpDir}/index.md

        ## === Create subpage for campaign ================
        varPage=${varTmpDir}/`echo ${varCampaign}.md | tr "[A-Z]" "[a-z]"`
        md_page_campaign ${varCampaign} > ${varPage}

        for varMeasurement in ${varMeasurements}
        {
            ## === Entries to main page ===================

			nofMeasurements=`find_nof_files ${varCampaign} ${varMeasurement}`
            # only create link and subpages if there is some contents to link to
            if [[ ${nofMeasurements} -ne 0 ]] ; then
                # create anchor for page
                varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`
                # link on main page
                echo "   - \ref ${varAnchor}  (${nofMeasurements} files)" >> ${varTmpDir}/index.md
                # sub-page for the type of measurement
                varPage=${varTmpDir}/`echo ${varCampaign}_${varMeasurement}.md | tr "[A-Z]" "[a-z]"`
                md_page_measurement ${varCampaign} ${varMeasurement} > ${varPage}

                for varQuicklook in ${varQuicklooks}
                {
					nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
                    if [[ ${nofQuicklooks} -ne 0 ]] ; then
                        varPage=${varTmpDir}/`echo ${varCampaign}_${varMeasurement}_${varQuicklook}.md | tr "[A-Z]" "[a-z]"`
                        md_page_quicklook ${varCampaign} ${varMeasurement} ${varQuicklook} > ${varPage}
                    fi
                }
            fi
        }
    }

    # Keep track of disk-space used
    echo ""                       >> ${varTmpDir}/index.md
    echo ""                       >> ${varTmpDir}/index.md
    echo "----"                   >> ${varTmpDir}/index.md
    echo "**Disk usage summary**" >> ${varTmpDir}/index.md
    echo "\code"                  >> ${varTmpDir}/index.md
    du -h ${varTargetDir} | sed s#/home/## >> ${varTmpDir}/index.md
    echo "\endcode"               >> ${varTmpDir}/index.md

    # Run doxygen to generate HTML output
    ${binDoxygen} ${varTmpDir}/doxygen.config
    # Remove temporary directory
    rm -rf ${varTmpDir}
}

##______________________________________________________________________________
##                                                             find_measurements

find_measurements ()
{
	echo "Searching for quicklook files ..."

	for varCampaign in ${varCampaigns}
	{
		for varMeasurement in ${varMeasurements}
		{
			echo " - ${varCampaign}.${varMeasurement} quicklooks"
			
			varLogfile=${varTmpDir}/${varCampaign}.${varMeasurement}.txt
			rm -f ${varLogfile}

			## =============================================
	
			echo "   -> Extracting initial list"
			
			for varName in `measurement_name_variants ${varMeasurement}`
			{
				find ${varTargetDir}/${varCampaign}  -name "*${varName}*.pdf" >> ${varLogfile}
			}
			
			echo "   -> Removing multiple entries"
			
			cat ${varLogfile} | sort -r | uniq > tmp
			mv tmp ${varLogfile}

			## =============================================
	
			echo "   -> Checking document pages"
			
			for FILE in `cat ${varLogfile}`
			{
        		# extract number of PDF pages
        		varPages=`pdfinfo ${FILE} | grep Pages | tr ":" "\n" | grep -v Pages | sed 's/^[ \t]*//'`
        		# write output to page
        		case ${varPages} in
            		"")
                		# Remove file to save disk space
                		rm -f ${FILE}
            		;;
            		"0")
                		# Remove file to save disk space
                		rm -f ${FILE}
            		;;
            		*)
                		echo $FILE >> tmp
            		;;
        		esac
			}
			# Store the vetted list
			mv tmp ${varLogfile}
		}
	}

	echo "Searching for quicklook files ... DONE"
}

## === Processing ==============================================================

# Syncronize data bewteen KNMI and SRON
#sync_data

cd ${varBasedir}

md_pages
