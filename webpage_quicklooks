#!/bin//bash

## === Variables ===============================================================

varBasedir=`pwd`
varTmpDir=${varBasedir}/doxygen_src
varTargetDir="/home/larsb/public_html/tropomi/quicklooks"
varSourceDirectories="/deos/larsb/tropomi/results/quicklooks"
varCampaigns="occ post_env"
varMeasurements="CheckExposureTime DPQF DrkDpqf DryRun EWLS Filter FPBB_EARTH Laser MONA MONB STAR_EARTH_GEO Stray"
varQuicklooks="quicklook_raw quicklook_raw_detector quicklook_eps quicklook_eps_detector quicklook_detector quicklook_scan"
varOutfile="index.html"
varPageTitle="TROPOMI SWIR quicklooks"

binDoxygen=/data/larsb/sw/bin/doxygen

## === Functions ===============================================================

#_______________________________________________________________________________
#                                                                  campaign_name

##  Get the full name/descripion of the measurement campaign.
#
#  @param name Abbreviation for the measurement campaign.
#  @return description Full name for the measurement campaign.
campaign_name ()
{
    case $1 in
        "occ")
            echo "On-Ground calibration (occ)"
        ;;
        "post_env")
            echo "Post-environmental calibration (post_env)"
        ;;
        "pre_env")
            echo "Pre-environmental calibration (pre_env)"
        ;;
    esac
}

#_______________________________________________________________________________
#                                                                 find_nof_files

find_nof_files ()
{
    varCampaign=$1

    if [ -z $2 ] ; then
        # === no measurement type defined =================
        if [ -z $3 ] ; then
            varQuicklook=""
            FILES=`find ${varSourceDirectories} -name *.pdf | grep -i ${varCampaign} | sort`
        else
            varQuicklook=$3
            FILES=`find ${varSourceDirectories} -name *.pdf | grep -i ${varCampaign} | grep -i ${varQuicklook} | sort`
        fi
    else
        # === measurement type defined ====================
        varMeasurement=$2
        if [ -z $3 ] ; then
            FILES=`find ${varSourceDirectories} -name *.pdf | grep -i ${varCampaign} | grep -i ${varMeasurement} | sort`
        else
            varQuicklook=$3
            FILES=`find ${varSourceDirectories} -name *.pdf | grep -i ${varCampaign} | grep -i ${varMeasurement} | grep -i ${varQuicklook} | sort`
        fi
    fi

    # display the number of files matching the above filter(s)
    echo $FILES  | wc -w  | sed 's/^[ \t]*//'
}

##______________________________________________________________________________
##                                                                     sync_data
##
##  Synchronize (import) data from IDAF to SRON.

sync_data ()
{
    cd /data/larsb/tropomi
    make sync_quicklooks
}

##______________________________________________________________________________
##                                                                doxygen_config
##
## Configuration settings for runnning Doxygen

doxygen_config ()
{
    echo "#---------------------------------------------------------------------------"
    echo "# Project settings"
    echo "#---------------------------------------------------------------------------"
    echo "DOXYFILE_ENCODING      = UTF-8"
    echo "PROJECT_NAME           = \"${varPageTitle}\""
    echo "FULL_PATH_NAMES        = NO"
    echo "MARKDOWN_SUPPORT       = YES"
    echo "SHOW_NAMESPACES        = NO"
    echo "#---------------------------------------------------------------------------"
    echo "# Input settings"
    echo "#---------------------------------------------------------------------------"
    echo "INPUT                  = ${varTmpDir}"
    echo "RECURSIVE              = YES"
    echo "IMAGE_PATH             = ${varSourceDirectories}"
    echo "HTML_OUTPUT            = ${varTargetDir}"
    echo "#---------------------------------------------------------------------------"
    echo "# Configuration options related to output"
    echo "#---------------------------------------------------------------------------"
    echo "GENERATE_HTML          = YES"
    echo "GENERATE_LATEX         = NO"
    echo "GENERATE_XML           = NO"
    echo "GENERATE_RTF           = NO"
}

#_______________________________________________________________________________
#                                                                      md_header

## Create header for a new page.
#
#  @param title  Title of the page.
#  @param anchor Anchor used for linking to the page.
md_header ()
{
    varTitle=$1
    varAnchor=$2
    varTitleLength=`echo ${varTitle} | wc -c`
    ((varTitleLength--))
    s=$(printf "%-${varTitleLength}s" "=")
    varUnderscore=`echo "${s// /=}"`

    echo "${varTitle}  {#${varAnchor}}"
    echo "${varUnderscore}"
    echo ""
}

##______________________________________________________________________________
##                                                              md_page_campaign

md_page_campaign ()
{
    varCampaign=$1

    md_header ${varCampaign} ${varCampaign}

    echo ""
    for varMeasurement in ${varMeasurements}
    {
        nofMeasurements=`find_nof_files ${varCampaign} ${varMeasurement}`

        if [[ ${nofMeasurements} -ne 0 ]] ; then
            varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`
            echo " - \subpage ${varAnchor}  (${nofMeasurements} files)"

            for varQuicklook in ${varQuicklooks}
            {
                nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
                # only create link if there is some contents to link to
                if [[ ${nofQuicklooks} -ne 0 ]] ; then
                    # create anchor to sub-page
                    varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
                    # create link to sub-page
                    echo "   - \ref ${varAnchor}  (${nofQuicklooks} files)"
                fi
            }
        fi
    }
    echo ""
}

##______________________________________________________________________________
##                                                           md_page_measurement

md_page_measurement ()
{
    varCampaign=$1
    varMeasurement=$2
    varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`

    md_header ${varMeasurement} ${varAnchor}

    for varQuicklook in ${varQuicklooks}
    {
        nofQuicklooks=`find_nof_files $1 $2 ${varQuicklook}`
        # only create link if there is some contents to link to
        if [[ ${nofQuicklooks} -ne 0 ]] ; then
            varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`
            echo " - \subpage ${varAnchor}  (${nofQuicklooks} files)"
        fi
    }
}

##______________________________________________________________________________
##                                                             md_page_quicklook

md_page_quicklook ()
{
    varCampaign=$1
    varMeasurement=$2
    varQuicklook=$3
    varAnchor=`echo ${varCampaign}_${varMeasurement}_${varQuicklook} | tr "[A-Z]" "[a-z]"`

    md_header ${varQuicklook} ${varAnchor}

    ## === List of quicklooks

    FILES=`find ${varSourceDirectories} -name *.pdf | grep -i ${varCampaign} | grep -i ${varMeasurement} | grep -i ${varQuicklook} | sort -r`
    for FILE in ${FILES}
    {
        varFilename=`echo ${FILE} | sed s#${varSourceDirectories}/${varCampaign}/## | sed s#.detector4.pdf##`
        varLink=`echo ${FILE} | sed s#${varSourceDirectories}/##`
        # extract number of PDF pages
        varPages=`pdfinfo ${FILE} | grep Pages | tr ":" "\n" | grep -v Pages | sed 's/^[ \t]*//'`
        # write output to page
        case ${varPages} in
            "")
                # Remove file to save disk space
                rm `find ${varTargetDir} -name "*${varFilename}*"`
            ;;
            "0")
                # Remove file to save disk space
                rm `find ${varTargetDir} -name "*${varFilename}*"`
            ;;
            *)
                echo "  -# [${varFilename}](${varLink})  (${varPages} pages)"
            ;;
        esac
    }

}

##______________________________________________________________________________
##                                                                      md_pages

md_pages ()
{
    # Create source directory
    mkdir -p ${varTmpDir}

    # Create configuration file for Doxygen
    doxygen_config > ${varTmpDir}/doxygen.config

    # Header for main page
    echo "${varPageTitle}  {#mainpage}"  > ${varTmpDir}/index.md
    echo "==============="              >> ${varTmpDir}/index.md

    for varCampaign in ${varCampaigns}
    {
        ## === Entries to main page =======================

        nofFiles=`find_nof_files ${varCampaign}`

        echo ""                                                >> ${varTmpDir}/index.md
        echo "`campaign_name ${varCampaign}`"                  >> ${varTmpDir}/index.md
        echo "----"                                            >> ${varTmpDir}/index.md
        echo ""                                                >> ${varTmpDir}/index.md
        echo " - \subpage ${varCampaign}  (${nofFiles} files)" >> ${varTmpDir}/index.md

        ## === Create subpage for campaign ================
        varPage=${varTmpDir}/`echo ${varCampaign}.md | tr "[A-Z]" "[a-z]"`
        md_page_campaign ${varCampaign} > ${varPage}

        for varMeasurement in ${varMeasurements}
        {
            ## === Entries to main page ===================

            nofMeasurements=`find_nof_files ${varCampaign} ${varMeasurement}`
            # only create link and subpages if there is some contents to link to
            if [[ ${nofMeasurements} -ne 0 ]] ; then
                # create anchor for page
                varAnchor=`echo ${varCampaign}_${varMeasurement} | tr "[A-Z]" "[a-z]"`
                # link on main page
                echo "   - \ref ${varAnchor}  (${nofMeasurements} files)" >> ${varTmpDir}/index.md
                # sub-page for the type of measurement
                varPage=${varTmpDir}/`echo ${varCampaign}_${varMeasurement}.md | tr "[A-Z]" "[a-z]"`
                md_page_measurement ${varCampaign} ${varMeasurement} > ${varPage}

                for varQuicklook in ${varQuicklooks}
                {
                    nofQuicklooks=`find_nof_files ${varCampaign} ${varMeasurement} ${varQuicklook}`
                    if [[ ${nofQuicklooks} -ne 0 ]] ; then
                        varPage=${varTmpDir}/`echo ${varCampaign}_${varMeasurement}_${varQuicklook}.md | tr "[A-Z]" "[a-z]"`
                        md_page_quicklook ${varCampaign} ${varMeasurement} ${varQuicklook} > ${varPage}
                    fi
                }
            fi
        }
    }

    # Keep track of disk-space used
    echo ""                       >> ${varTmpDir}/index.md
    echo ""                       >> ${varTmpDir}/index.md
    echo "----"                   >> ${varTmpDir}/index.md
    echo "**Disk usage summary**" >> ${varTmpDir}/index.md
    echo "\code"                  >> ${varTmpDir}/index.md
    du -h ${varTargetDir} | sed s#/home/## >> ${varTmpDir}/index.md
    echo "\endcode"               >> ${varTmpDir}/index.md

    # Run doxygen to generate HTML output
    ${binDoxygen} ${varTmpDir}/doxygen.config
    # Remove temporary directory
    rm -rf ${varTmpDir}
}

## === Processing ==============================================================

sync_data

cd ${varBasedir}
md_pages
